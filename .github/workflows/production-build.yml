name: Production Build Pipeline

on:
  push:
    branches:
      - main # Trigger the pipeline on pushes to the main branch
  workflow_dispatch: # Allow manual triggering of the pipeline

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 4: Run Unit Tests
      - name: Run Unit Tests
        run: mvn test -Dtest=*UnitTest

      # Step 5: Run Integration Tests
      - name: Run Integration Tests
        run: mvn verify -Dtest=*IntegrationTest

      # Step 6: Archive the production JAR
      - name: Archive Production JAR
        uses: actions/upload-artifact@v3.1.0
        with:
          name: java-todo-api
          path: target/java-todo-api-*.jar

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build # Run this job only after the build job succeeds

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Download the production JAR
      - name: Download Production JAR
        uses: actions/download-artifact@v3
        with:
          name: java-todo-api

      # Step 4: Deploy the application (example: copy to a server)
      - name: Deploy to Server
        run: |
          scp -i ~/.ssh/id_rsa target/java-todo-api-*.jar user@your-server:/path/to/deploy
          ssh -i ~/.ssh/id_rsa user@your-server "sudo systemctl restart java-todo-api"